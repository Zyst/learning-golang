package main

import (
	"database/sql"
	"fmt"

	_ "github.com/go-sql-driver/mysql"
)

// In this simple program any crashes should just panic
func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	// Open connection using DB URL
	db, err := sql.Open("mysql", "root@/sys?charset=utf8")
	defer db.Close()

	checkErr(err)

	// Insert
	statement, err := db.Prepare("INSERT userinfo SET username=?,departname=?,created=?")
	checkErr(err)

	// Create a new user
	res, err := statement.Exec("Erick", "Programming", "1992-07-03")
	checkErr(err)

	// The id generated by our insert above
	id, err := res.LastInsertId()
	checkErr(err)

	fmt.Println("Created", id)

	// Update
	statement, err = db.Prepare("update userinfo set username=? where uid=?")
	checkErr(err)

	// We update our username, using the id we got previously
	res, err = statement.Exec("erickXupdate", id)
	checkErr(err)

	// The number of rows affected by our change
	affected, err := res.RowsAffected()
	checkErr(err)

	fmt.Println("Updated", affected)

	// Query
	rows, err := db.Query("SELECT * FROM userinfo")
	checkErr(err)

	// While we have rows, we print out the information in there
	for rows.Next() {
		var uid int
		var username string
		var department string
		var created string

		err = rows.Scan(&uid, &username, &department, &created)
		checkErr(err)

		fmt.Println("UID", uid)
		fmt.Println("Username", username)
		fmt.Println("Department", department)
		fmt.Println("Created", created)
	}

	// Delete
	statement, err = db.Prepare("delete from userinfo where uid=?")
	checkErr(err)

	// We delete the ID we created
	res, err = statement.Exec(id)
	checkErr(err)

	// We show how many rows (count) were affected
	affected, err = res.RowsAffected()
	checkErr(err)

	fmt.Println("Deleted", affected)
}
